// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SWD392.OutfitBox.DataLayer.Databases.Redis;

#nullable disable

namespace SWD392.OutfitBox.DataLayer.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240714132740_seedBrand")]
    partial class seedBrand
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Area");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Linh Trung",
                            City = "Ho Chi Minh",
                            District = "Thu Duc"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Dong Hoa",
                            City = "Binh Duong",
                            District = "Di An"
                        });
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Brand", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Brand");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = " Explosive within the Vietnamese fashion community in 2013, Nosbyn captured the hearts of young fashion enthusiasts with its stylish yet basic items. Leading the way were its signature solid-colored crop tops, which remained a prominent fixture even after three years of development. Today, Nosbyn continues to hold a strong position in the hearts of Vietnamese fashionistas.",
                            ImageUrl = "https://theme.hstatic.net/200000571545/1000929382/14/logo.png?v=171",
                            IsFeatured = false,
                            Name = "NOSBYN",
                            Status = 1
                        },
                        new
                        {
                            ID = 2,
                            Description = "The BlueTshirt, established in 2012, initially introduced simple t-shirt designs with inspiring slogans to the Vietnamese market. The brand's designs strike a perfect balance between elegance and a free-spirited nature, reflecting the personality of its founder. Whether you are a gentle and graceful woman or someone with a strong individualistic style, The BlueTshirt offers a wide range of products to cater to your preferences.",
                            ImageUrl = "https://theme.hstatic.net/1000053720/1001049163/14/logo.png?v=3942",
                            IsFeatured = false,
                            Name = "THE BLUE T-SHIRT",
                            Status = 1
                        },
                        new
                        {
                            ID = 3,
                            Description = "With an unwavering commitment to quality craftsmanship, ethical practices, and timeless design, O4R is poised to become the go-to destination for fashion-conscious individuals seeking both substance and style",
                            ImageUrl = "https://panel.outfit4rent.online/images/logo-mark-light.svg",
                            IsFeatured = false,
                            Name = "OUTFIT4RENT",
                            Status = 1
                        },
                        new
                        {
                            ID = 5,
                            Description = "Uniqlo LLC is a Japanese casual wear design, apparel, and retail company.",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/9/92/UNIQLO_logo.svg",
                            IsFeatured = false,
                            Name = "Uniqlo",
                            Status = 1
                        },
                        new
                        {
                            ID = 6,
                            Description = "Zara is a Spanish clothing and accessories brand",
                            ImageUrl = "https://img.salehere.co.th/p/1200x0/2024/02/16/gdlpd8hwxiob.jpg",
                            IsFeatured = false,
                            Name = "Zara",
                            Status = 1
                        },
                        new
                        {
                            ID = 7,
                            Description = "Famous Spanish fashion brand Pull&Bear.",
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQgJ2G23IAT9jiabKjH8VZ09gtj9BRXH2kCsA&s",
                            IsFeatured = false,
                            Name = "Pull&bear",
                            Status = 1
                        });
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "T-Shirt,Vest,Polo,Smock,...",
                            ImageUrl = "https://hoangnguyenstore.com/wp-content/uploads/2021/11/ao-so-mi-dior-hoa-tiet-nhen-asmd01-5.webp",
                            IsFeatured = false,
                            Name = "Shirt",
                            Status = 0
                        },
                        new
                        {
                            ID = 2,
                            Description = "Gauchos,Jeans,Trousers,...",
                            ImageUrl = "https://cf.shopee.vn/file/53ba7e3dcff647db1ff302f6c378a0bc",
                            IsFeatured = false,
                            Name = "Short",
                            Status = 0
                        },
                        new
                        {
                            ID = 3,
                            Description = "Skater,Circle,Aline,Maxi,Sarong,...",
                            ImageUrl = "https://lzd-img-global.slatic.net/g/p/ff217e1a9b75a39108b8a04c22d164dc.jpg_720x720q80.jpg",
                            IsFeatured = false,
                            Name = "Skirt",
                            Status = 0
                        },
                        new
                        {
                            ID = 4,
                            Description = "A-line,Empire,Tent,Princess,Shift,...",
                            ImageUrl = "https://image.dhgate.com/0x0s/f2-albu-g17-M00-71-84-rBVa4V_J8_iAXsmWAADRlVU_URo051.jpg/2021-black-ball-gown-gothic-wedding-dresses.jpg",
                            IsFeatured = false,
                            Name = "Dress",
                            Status = 0
                        },
                        new
                        {
                            ID = 5,
                            Description = "Ao dai,Traditional clothers,...",
                            ImageUrl = "https://i.pinimg.com/originals/47/2c/21/472c21c67c84e2d69866319ccf7906d6.jpg",
                            IsFeatured = false,
                            Name = "Costumes",
                            Status = 0
                        },
                        new
                        {
                            ID = 6,
                            Description = "Sunglasses,Tie,Watch,Bow,...",
                            ImageUrl = "https://d2hg8ctx8thzji.cloudfront.net/clusterfeed.net/wp-content/uploads/2020/07/6CommonlyUsedAccessoriestoChooseFrom-750x532.jpg",
                            IsFeatured = false,
                            Name = "Accessories",
                            Status = 0
                        },
                        new
                        {
                            ID = 7,
                            Description = "Way for couples or friends to express their affection and bond with each other",
                            ImageUrl = "https://top.chon.vn/wp-content/uploads/2019/09/shop-do-doi-5.jpg",
                            IsFeatured = false,
                            Name = "Couple",
                            Status = 0
                        });
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.CategoryPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("MaxAvailableQuantity")
                        .HasColumnType("int");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PackageId");

                    b.ToTable("CategoryPackages");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            MaxAvailableQuantity = 3,
                            PackageId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            MaxAvailableQuantity = 3,
                            PackageId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            MaxAvailableQuantity = 3,
                            PackageId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            MaxAvailableQuantity = 3,
                            PackageId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 6,
                            MaxAvailableQuantity = 3,
                            PackageId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            MaxAvailableQuantity = 2,
                            PackageId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            MaxAvailableQuantity = 2,
                            PackageId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            MaxAvailableQuantity = 2,
                            PackageId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            MaxAvailableQuantity = 2,
                            PackageId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            MaxAvailableQuantity = 4,
                            PackageId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            MaxAvailableQuantity = 4,
                            PackageId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            MaxAvailableQuantity = 4,
                            PackageId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 4,
                            MaxAvailableQuantity = 4,
                            PackageId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 6,
                            MaxAvailableQuantity = 4,
                            PackageId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 7,
                            MaxAvailableQuantity = 4,
                            PackageId = 4,
                            Status = 1
                        });
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("MoneyInWallet")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Dong Nai",
                            Email = "Khanhvhdse173550@fpt.edu.vn",
                            MoneyInWallet = 1000L,
                            Name = "Khanh Sky",
                            Phone = "0325739910",
                            Picture = "",
                            Status = 1,
                            Time = new DateTime(2024, 7, 14, 20, 27, 40, 94, DateTimeKind.Local).AddTicks(8883)
                        },
                        new
                        {
                            Id = 2,
                            Address = "HCM",
                            Email = "User2@gmail.com",
                            MoneyInWallet = 100L,
                            Name = "User2",
                            Phone = "123",
                            Picture = "",
                            Status = 1,
                            Time = new DateTime(2024, 7, 14, 20, 27, 40, 94, DateTimeKind.Local).AddTicks(8899)
                        },
                        new
                        {
                            Id = 3,
                            Address = "HCM",
                            Email = "User3@gmail.com",
                            MoneyInWallet = 100L,
                            Name = "User3",
                            Phone = "123",
                            Picture = "",
                            Status = 1,
                            Time = new DateTime(2024, 7, 14, 20, 27, 40, 94, DateTimeKind.Local).AddTicks(8901)
                        },
                        new
                        {
                            Id = 4,
                            Address = "HCM",
                            Email = "User4gmail.com",
                            MoneyInWallet = 100L,
                            Name = "User4",
                            Phone = "123",
                            Picture = "",
                            Status = 1,
                            Time = new DateTime(2024, 7, 14, 20, 27, 40, 94, DateTimeKind.Local).AddTicks(8902)
                        });
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.CustomerPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("QuantityOfItems")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double?>("TotalDeposit")
                        .HasColumnType("float");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PackageId");

                    b.HasIndex("TransactionId");

                    b.ToTable("CustomerPackage");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            DateFrom = new DateTime(2024, 7, 14, 20, 27, 40, 94, DateTimeKind.Local).AddTicks(8954),
                            DateTo = new DateTime(2024, 8, 13, 20, 27, 40, 94, DateTimeKind.Local).AddTicks(8955),
                            PackageId = 1,
                            PackageName = "Newcomer Trial",
                            Price = 200.0,
                            ReceiverAddress = "Nha Van Hoa Sinh Vien",
                            ReceiverName = "Khanh Sky",
                            ReceiverPhone = "0325739910",
                            Status = 1,
                            TransactionId = 1
                        });
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Deposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AmountMoney")
                        .HasColumnType("float");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Deposits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmountMoney = 20.0,
                            CustomerId = 1,
                            Date = new DateTime(2024, 7, 14, 20, 27, 40, 94, DateTimeKind.Local).AddTicks(9057),
                            Type = "Khuyen Mai"
                        });
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.FavouriteProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("FavouriteProduct");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Image", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("IdProduct")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("IdProduct");

                    b.ToTable("Image");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            IdProduct = 1,
                            Link = "https://down-vn.img.susercontent.com/file/vn-11134201-7r98o-lvmx2enml619c4"
                        },
                        new
                        {
                            ID = 2,
                            IdProduct = 1,
                            Link = "https://down-vn.img.susercontent.com/file/vn-11134201-7r98o-lvmx2hoo6zzv29"
                        },
                        new
                        {
                            ID = 3,
                            IdProduct = 8,
                            Link = "https://down-vn.img.susercontent.com/file/1e890d0f6604feb16d1c020fb4296a56"
                        },
                        new
                        {
                            ID = 4,
                            IdProduct = 8,
                            Link = "https://down-vn.img.susercontent.com/file/a73d437dcb06544be1efcb2fff22154d"
                        },
                        new
                        {
                            ID = 5,
                            IdProduct = 2,
                            Link = "https://down-vn.img.susercontent.com/file/cn-11134207-7qukw-lk7tiyi2rj4t2c"
                        },
                        new
                        {
                            ID = 6,
                            IdProduct = 2,
                            Link = "https://down-vn.img.susercontent.com/file/cn-11134207-7qukw-lk7tiyi2rj0481"
                        },
                        new
                        {
                            ID = 7,
                            IdProduct = 3,
                            Link = "https://down-vn.img.susercontent.com/file/eaecde77548a04719b5822daf9b5e4b7"
                        },
                        new
                        {
                            ID = 8,
                            IdProduct = 3,
                            Link = "https://down-vn.img.susercontent.com/file/216545f44c9824c6548349fbb63d9103"
                        },
                        new
                        {
                            ID = 9,
                            IdProduct = 4,
                            Link = "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-lwoaor9y31sr34"
                        },
                        new
                        {
                            ID = 10,
                            IdProduct = 4,
                            Link = "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-lwoaor9ooj4p98"
                        },
                        new
                        {
                            ID = 11,
                            IdProduct = 5,
                            Link = "https://down-vn.img.susercontent.com/file/vn-11134201-7r98o-lt4vm66wzc73f1"
                        },
                        new
                        {
                            ID = 12,
                            IdProduct = 5,
                            Link = "https://down-vn.img.susercontent.com/file/vn-11134201-7r98o-lt4vm8t95aet8f"
                        },
                        new
                        {
                            ID = 13,
                            IdProduct = 6,
                            Link = "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-lwle0pi76c4b5f"
                        },
                        new
                        {
                            ID = 14,
                            IdProduct = 6,
                            Link = "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-lstn66047vt094"
                        },
                        new
                        {
                            ID = 15,
                            IdProduct = 6,
                            Link = "https://down-vn.img.susercontent.com/file/vn-11134207-7r98o-lstn6604aoxw93"
                        },
                        new
                        {
                            ID = 16,
                            IdProduct = 7,
                            Link = "https://down-vn.img.susercontent.com/file/sg-11134201-7rd6m-lvcplff2w8bx42"
                        },
                        new
                        {
                            ID = 17,
                            IdProduct = 7,
                            Link = "https://down-vn.img.susercontent.com/file/sg-11134201-7rd49-lvcpl96w0b3v79"
                        },
                        new
                        {
                            ID = 18,
                            IdProduct = 7,
                            Link = "https://down-vn.img.susercontent.com/file/sg-11134201-7rd4d-lvcplok5iobc5f"
                        });
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.ItemInUserPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateGive")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReceive")
                        .HasColumnType("datetime2");

                    b.Property<double>("Deposit")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReturnedQuantity")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TornMoney")
                        .HasColumnType("float");

                    b.Property<int>("UserPackageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserPackageId");

                    b.ToTable("ItemInUserPackages");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableRentDays")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumOfProduct")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Packages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableRentDays = 30,
                            Description = "The new customer can use to experience, with total 4 product in 4 category: Shirt,Short,Skirt,Dress. Max product in each category is 2",
                            ImageUrl = "",
                            IsFeatured = false,
                            Name = "Newcomer Trial",
                            NumOfProduct = 4,
                            Price = 200.0,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            AvailableRentDays = 30,
                            Description = "Customers will feel comfortable and appreciate the size and quality of the outfit, The package will provide 8 products in 5 packages:Shirt,Short,Skirt,Dress,Accessories.  Max product in each category is 3",
                            ImageUrl = "",
                            IsFeatured = false,
                            Name = "Basic Package",
                            NumOfProduct = 8,
                            Price = 600.0,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            AvailableRentDays = 30,
                            Description = "Customers will feel comfortable and appreciate the size and quality of the outfit, The package will provide 12 products in 6 packages:Shirt,Short,Skirt,Dress,Accessories,Costumes .Max product in each category is 4",
                            ImageUrl = "",
                            IsFeatured = false,
                            Name = "VIP Package",
                            NumOfProduct = 12,
                            Price = 800.0,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            AvailableRentDays = 30,
                            Description = "excited to introduce the package, designed to make this summer unforgettable for couples and close friends! Celebrate the warmth of the season and the bonds of love with our exclusive matching items that perfectly capture the essence of togetherness",
                            ImageUrl = "",
                            IsFeatured = false,
                            Name = "'Love'Summer",
                            NumOfProduct = 4,
                            Price = 600.0,
                            Status = 1
                        });
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("X")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Y")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Partners");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "https://www.grab.com/vn/express/",
                            AreaId = 1,
                            Email = "Grap@gmail.com",
                            Name = "Grap",
                            OTP = "",
                            Password = "",
                            Phone = "123456",
                            Status = 0,
                            X = "10.8447022",
                            Y = "106.7618557"
                        },
                        new
                        {
                            Id = 2,
                            Address = "https://be.com.vn/",
                            AreaId = 1,
                            Email = "Grap@gmail.com",
                            Name = "Bee",
                            OTP = "",
                            Password = "",
                            Phone = "123456",
                            Status = 0,
                            X = "10.8447022",
                            Y = "106.7618557"
                        });
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<double>("Deposit")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdBrand")
                        .HasColumnType("int");

                    b.Property<int>("IdCategory")
                        .HasColumnType("int");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("IsUsed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("IdBrand");

                    b.HasIndex("IdCategory");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AvailableQuantity = 20,
                            Deposit = 0.10000000000000001,
                            Description = "Men's and Women's Short Sleeve Shirt Loose Letter Couple Ins Shirt Multifunctional Vintage Half Sleeve UFO Shirt",
                            IdBrand = 1,
                            IdCategory = 1,
                            IsFeatured = false,
                            IsUsed = "False",
                            Name = "Cosmic Planet",
                            Price = 100f,
                            Quantity = 20,
                            Size = "M",
                            Status = 1,
                            Type = "New"
                        },
                        new
                        {
                            ID = 2,
                            AvailableQuantity = 20,
                            Deposit = 0.10000000000000001,
                            Description = "The ZHUXIA loose-fitting, short-sleeved shirt with a retro Japanese vintage style is a great choice for women's summer fashion.",
                            IdBrand = 2,
                            IdCategory = 1,
                            IsFeatured = false,
                            IsUsed = "False",
                            Name = "ZHUXIA-Shirt",
                            Price = 110f,
                            Quantity = 20,
                            Size = "X",
                            Status = 1,
                            Type = "New"
                        },
                        new
                        {
                            ID = 3,
                            AvailableQuantity = 20,
                            Deposit = 0.14999999999999999,
                            Description = "Men's basic wide-leg khaki pants made in Korea are extremely beautiful, 3-color elastic waist pants show off Korean style",
                            IdBrand = 3,
                            IdCategory = 2,
                            IsFeatured = false,
                            IsUsed = "False",
                            Name = "Men's basic wide-leg pants",
                            Price = 160f,
                            Quantity = 20,
                            Size = "X",
                            Status = 1,
                            Type = "New"
                        },
                        new
                        {
                            ID = 4,
                            AvailableQuantity = 20,
                            Deposit = 0.14999999999999999,
                            Description = "[HOT MODEL 2023] made of cool linen fabric, high-waisted with elastic waistband and drawstring for adjustable fit.",
                            IdBrand = 3,
                            IdCategory = 1,
                            IsFeatured = false,
                            IsUsed = "False",
                            Name = "Wide-leg women's pants",
                            Price = 150f,
                            Quantity = 20,
                            Size = "M",
                            Status = 1,
                            Type = "New"
                        },
                        new
                        {
                            ID = 5,
                            AvailableQuantity = 20,
                            Deposit = 0.10000000000000001,
                            Description = "Gonz BLACK Loose FORM T-SHIRT - GONZ The Face 4 NEW HOT 2024",
                            IdBrand = 3,
                            IdCategory = 1,
                            IsFeatured = false,
                            IsUsed = "False",
                            Name = "Gonz WIDE FORM T-SHIRT",
                            Price = 130f,
                            Quantity = 20,
                            Size = "M",
                            Status = 1,
                            Type = "New"
                        },
                        new
                        {
                            ID = 6,
                            AvailableQuantity = 20,
                            Deposit = 0.20000000000000001,
                            Description = "This vintage floral dress features a flattering A-line silhouette with a delicate floral print. Perfect for a summer day out or a casual evening event.",
                            IdBrand = 1,
                            IdCategory = 1,
                            IsFeatured = false,
                            IsUsed = "False",
                            Name = "Vintage Floral Dress",
                            Price = 200f,
                            Quantity = 20,
                            Size = "M",
                            Status = 1,
                            Type = "New"
                        },
                        new
                        {
                            ID = 7,
                            AvailableQuantity = 0,
                            Deposit = 0.14999999999999999,
                            Description = "Make a statement with this stunning floral maxi skirt. Its flowing design and beautiful floral pattern will turn heads wherever you go.",
                            IdBrand = 3,
                            IdCategory = 4,
                            IsFeatured = false,
                            IsUsed = "False",
                            Name = "Floral Maxi Skirt",
                            Price = 170f,
                            Quantity = 0,
                            Size = "XS",
                            Status = 1,
                            Type = "New"
                        },
                        new
                        {
                            ID = 8,
                            AvailableQuantity = 0,
                            Deposit = 0.20000000000000001,
                            Description = "Men's and women's couple shirts with a dog and cat pulling a leash design",
                            IdBrand = 3,
                            IdCategory = 7,
                            IsFeatured = false,
                            IsUsed = "False",
                            Name = "Dog cat couple",
                            Price = 230f,
                            Quantity = 0,
                            Size = "XS",
                            Status = 1,
                            Type = "New"
                        });
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.ProductReturnOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReturnOrderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("ThornMoney")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReturnOrderId");

                    b.ToTable("ProductReturnOrders");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.ReturnOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerPackageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateReturn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuantityOfItems")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalThornMoney")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerPackageId");

                    b.HasIndex("PartnerId");

                    b.ToTable("ReturnOrders");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberStars")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.ReviewImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.ToTable("ReviewImages");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateTransaction")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepositId")
                        .HasColumnType("int");

                    b.Property<string>("Paymethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepositId");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 0.0,
                            DateTransaction = new DateTime(2024, 7, 14, 20, 27, 40, 94, DateTimeKind.Local).AddTicks(8987),
                            DepositId = 1,
                            Paymethod = "",
                            Status = 0,
                            WalletId = 1
                        });
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoldeId")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<long>("OTP")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WalletCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WalletName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WalletPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Wallets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            OTP = 0L,
                            Status = 1,
                            WalletCode = "123",
                            WalletName = "Momo",
                            WalletPassword = "123"
                        });
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.CategoryPackage", b =>
                {
                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.Category", "Category")
                        .WithMany("categoryPackages")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.Package", "Package")
                        .WithMany("CategoryPackages")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.CustomerPackage", b =>
                {
                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.Customer", "Customer")
                        .WithMany("UserPackages")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.Package", "Package")
                        .WithMany("CustomerPackages")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.Transaction", "Transaction")
                        .WithMany("CustomerPackages")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Customer");

                    b.Navigation("Package");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Deposit", b =>
                {
                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.FavouriteProduct", b =>
                {
                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Image", b =>
                {
                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.ItemInUserPackage", b =>
                {
                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.CustomerPackage", "UserPackage")
                        .WithMany("Items")
                        .HasForeignKey("UserPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("UserPackage");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Partner", b =>
                {
                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.Area", "Area")
                        .WithMany("Partners")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Product", b =>
                {
                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("IdBrand")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.ProductReturnOrder", b =>
                {
                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.ReturnOrder", "ReturnOrder")
                        .WithMany("ProductReturnOrders")
                        .HasForeignKey("ReturnOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ReturnOrder");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.ReturnOrder", b =>
                {
                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.Customer", "Customer")
                        .WithMany("ReturnOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.CustomerPackage", "CustomerPackage")
                        .WithMany()
                        .HasForeignKey("CustomerPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.Partner", "Partner")
                        .WithMany("ReturnOrders")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("CustomerPackage");

                    b.Navigation("Partner");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Review", b =>
                {
                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.Customer", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.ReviewImage", b =>
                {
                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.Review", "Review")
                        .WithMany("ReviewImages")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Transaction", b =>
                {
                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.Deposit", "Deposit")
                        .WithMany("Transactions")
                        .HasForeignKey("DepositId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deposit");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.User", b =>
                {
                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Wallet", b =>
                {
                    b.HasOne("SWD392.OutfitBox.DataLayer.Entities.Customer", "Customer")
                        .WithMany("Wallets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Area", b =>
                {
                    b.Navigation("Partners");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("categoryPackages");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Customer", b =>
                {
                    b.Navigation("ReturnOrders");

                    b.Navigation("Reviews");

                    b.Navigation("UserPackages");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.CustomerPackage", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Deposit", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Package", b =>
                {
                    b.Navigation("CategoryPackages");

                    b.Navigation("CustomerPackages");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Partner", b =>
                {
                    b.Navigation("ReturnOrders");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Product", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.ReturnOrder", b =>
                {
                    b.Navigation("ProductReturnOrders");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Review", b =>
                {
                    b.Navigation("ReviewImages");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Transaction", b =>
                {
                    b.Navigation("CustomerPackages");
                });

            modelBuilder.Entity("SWD392.OutfitBox.DataLayer.Entities.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
